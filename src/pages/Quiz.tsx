import { useState, useEffect, useMemo } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import MainLayout from '@/components/layout/MainLayout'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { 
  Clock, 
  CheckCircle, 
  XCircle, 
  Brain, 
  BookOpen, 
  Target, 
  TrendingUp,
  AlertCircle,
  Play,
  Pause,
  RotateCcw,
  Eye,
  FileText,
  Users,
  Timer,
  Award,
  Lightbulb
} from 'lucide-react'
import { useAuth } from '@/contexts/AuthContext'

// Mock AI-generated quiz questions
const mockAIQuestions = [
  {
    id: '1',
    question: 'What is the derivative of x² + 3x + 1?',
    type: 'multiple_choice',
    options: [
      { id: 'a', text: '2x + 3', correct: true },
      { id: 'b', text: 'x² + 3', correct: false },
      { id: 'c', text: '2x + 1', correct: false },
      { id: 'd', text: 'x + 3', correct: false }
    ],
    explanation: 'The derivative of x² is 2x, the derivative of 3x is 3, and the derivative of 1 is 0. Therefore, the derivative of x² + 3x + 1 is 2x + 3.',
    difficulty: 'medium',
    subject: 'Mathematics',
    topic: 'Calculus',
    aiGenerated: true,
    teacherApproved: true,
    teacherNote: 'Good question for testing basic derivative rules.'
  },
  {
    id: '2',
    question: 'Explain the concept of gravitational potential energy and provide a real-world example.',
    type: 'essay',
    maxWords: 150,
    explanation: 'Gravitational potential energy is the energy an object possesses due to its position in a gravitational field. It increases with height and mass.',
    difficulty: 'hard',
    subject: 'Physics',
    topic: 'Mechanics',
    aiGenerated: true,
    teacherApproved: true,
    teacherNote: 'Excellent for testing conceptual understanding.'
  },
  {
    id: '3',
    question: 'Which of the following is NOT a characteristic of a good thesis statement?',
    type: 'multiple_choice',
    options: [
      { id: 'a', text: 'It is specific and focused', correct: false },
      { id: 'b', text: 'It is arguable', correct: false },
      { id: 'c', text: 'It is written in first person', correct: true },
      { id: 'd', text: 'It previews the main points', correct: false }
    ],
    explanation: 'A good thesis statement should be written in third person, not first person. It should be specific, arguable, and preview the main points of the essay.',
    difficulty: 'easy',
    subject: 'English',
    topic: 'Essay Writing',
    aiGenerated: true,
    teacherApproved: false,
    teacherNote: 'Consider rephrasing to be more specific about what makes a thesis statement effective.'
  }
]

const mockQuizData = {
  id: '1',
  title: 'AI-Generated Mathematics Quiz',
  subject: 'Mathematics',
  description: 'This quiz was generated by AI and moderated by your teacher to test your understanding of key concepts.',
  totalQuestions: mockAIQuestions.length,
  timeLimit: 45,
  difficulty: 'Mixed',
  aiGenerated: true,
  teacherModerated: true,
  teacherName: 'Ms. Sarah Wilson',
  lastModified: '2024-01-15T10:00:00Z'
}

export default function Quiz() {
  const { id } = useParams()
  const navigate = useNavigate()
  const { user } = useAuth()
  
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [answers, setAnswers] = useState<Record<string, any>>({})
  const [timeRemaining, setTimeRemaining] = useState(mockQuizData.timeLimit * 60)
  const [isActive, setIsActive] = useState(false)
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [showResults, setShowResults] = useState(false)
  const [userRole, setUserRole] = useState<'student' | 'teacher'>('student')

  const currentQuestion = mockAIQuestions[currentQuestionIndex]
  const progress = ((currentQuestionIndex + 1) / mockQuizData.totalQuestions) * 100

  // Timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null
    
    if (isActive && timeRemaining > 0 && !quizCompleted) {
      interval = setInterval(() => {
        setTimeRemaining((time) => {
          if (time <= 1) {
            setIsActive(false)
            setQuizCompleted(true)
            return 0
          }
          return time - 1
        })
      }, 1000)
    }

    return () => {
      if (interval) clearInterval(interval)
    }
  }, [isActive, timeRemaining, quizCompleted])

  const startQuiz = () => {
    setIsActive(true)
    setTimeRemaining(mockQuizData.timeLimit * 60)
  }

  const pauseQuiz = () => {
    setIsActive(false)
  }

  const resumeQuiz = () => {
    setIsActive(true)
  }

  const handleAnswerChange = (questionId: string, answer: any) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: answer
    }))
  }

  const nextQuestion = () => {
    if (currentQuestionIndex < mockAIQuestions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1)
    }
  }

  const previousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(prev => prev - 1)
    }
  }

  const submitQuiz = () => {
    setQuizCompleted(true)
    setIsActive(false)
    // TODO: Calculate results and send to backend
  }

  const calculateResults = () => {
    let correctAnswers = 0
    let totalScore = 0
    
    mockAIQuestions.forEach(question => {
      const userAnswer = answers[question.id]
      if (question.type === 'multiple_choice') {
        const correctOption = question.options.find(opt => opt.correct)
        if (userAnswer === correctOption?.id) {
          correctAnswers++
          totalScore += 100
        }
      } else if (question.type === 'essay') {
        // For essay questions, assume partial credit if answered
        if (userAnswer && userAnswer.trim().length > 0) {
          totalScore += 50
        }
      }
    })
    
    return {
      correctAnswers,
      totalQuestions: mockAIQuestions.length,
      score: Math.round(totalScore / mockAIQuestions.length),
      percentage: Math.round((correctAnswers / mockAIQuestions.length) * 100)
    }
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const getQuestionTypeIcon = (type: string) => {
    switch (type) {
      case 'multiple_choice':
        return <FileText className="h-4 w-4" />
      case 'essay':
        return <BookOpen className="h-4 w-4" />
      default:
        return <FileText className="h-4 w-4" />
    }
  }

  const getDifficultyColor = (difficulty: string) => {
    const colors = {
      easy: 'bg-green-100 text-green-800',
      medium: 'bg-yellow-100 text-yellow-800',
      hard: 'bg-red-100 text-red-800'
    }
    return colors[difficulty as keyof typeof colors] || 'bg-gray-100 text-gray-800'
  }

  if (quizCompleted && showResults) {
    const results = calculateResults()
    
    return (
      <MainLayout userRole={userRole}>
        <div className="max-w-4xl mx-auto p-6 space-y-6">
          <Card>
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <Award className="h-16 w-16 text-yellow-500" />
              </div>
              <CardTitle className="text-2xl">Quiz Results</CardTitle>
              <CardDescription>
                {mockQuizData.title} - {results.score}% Complete
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-3 gap-4 text-center">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">{results.score}%</div>
                  <div className="text-sm text-blue-600">Overall Score</div>
                </div>
                <div className="p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">{results.correctAnswers}</div>
                  <div className="text-sm text-green-600">Correct Answers</div>
                </div>
                <div className="p-4 bg-purple-50 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">{results.totalQuestions}</div>
                  <div className="text-sm text-purple-600">Total Questions</div>
                </div>
              </div>
              
              <div className="space-y-4">
                <h3 className="font-semibold text-lg">Question Review</h3>
                {mockAIQuestions.map((question, index) => {
                  const userAnswer = answers[question.id]
                  const isCorrect = question.type === 'multiple_choice' 
                    ? question.options.find(opt => opt.correct)?.id === userAnswer
                    : userAnswer && userAnswer.trim().length > 0
                  
                  return (
                    <div key={question.id} className="border rounded-lg p-4 space-y-3">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">Question {index + 1}</span>
                        {isCorrect ? (
                          <CheckCircle className="h-5 w-5 text-green-600" />
                        ) : (
                          <XCircle className="h-5 w-5 text-red-600" />
                        )}
                        <Badge className={getDifficultyColor(question.difficulty)}>
                          {question.difficulty}
                        </Badge>
                        <Badge variant="outline" className="flex items-center gap-1">
                          <Brain className="h-3 w-3" />
                          AI Generated
                        </Badge>
                      </div>
                      
                      <p className="text-gray-700">{question.question}</p>
                      
                      {question.type === 'multiple_choice' && (
                        <div className="space-y-2">
                          <div className="text-sm font-medium">Your Answer:</div>
                          <div className="text-sm text-gray-600">
                            {userAnswer ? question.options.find(opt => opt.id === userAnswer)?.text : 'Not answered'}
                          </div>
                          <div className="text-sm font-medium">Correct Answer:</div>
                          <div className="text-sm text-green-600">
                            {question.options.find(opt => opt.correct)?.text}
                          </div>
                        </div>
                      )}
                      
                      {question.type === 'essay' && (
                        <div className="space-y-2">
                          <div className="text-sm font-medium">Your Answer:</div>
                          <div className="text-sm text-gray-600">
                            {userAnswer || 'Not answered'}
                          </div>
                        </div>
                      )}
                      
                      <div className="p-3 bg-blue-50 rounded-lg">
                        <div className="text-sm font-medium text-blue-800 mb-1">Explanation:</div>
                        <div className="text-sm text-blue-700">{question.explanation}</div>
                      </div>
                      
                      {question.teacherNote && (
                        <div className="p-3 bg-yellow-50 rounded-lg">
                          <div className="text-sm font-medium text-yellow-800 mb-1">Teacher Note:</div>
                          <div className="text-sm text-yellow-700">{question.teacherNote}</div>
                        </div>
                      )}
                    </div>
                  )
                })}
              </div>
              
              <div className="flex justify-center gap-4">
                <Button onClick={() => navigate('/student/quizzes')}>
                  Back to Quizzes
                </Button>
                <Button variant="outline" onClick={() => window.location.reload()}>
                  <RotateCcw className="mr-2 h-4 w-4" />
                  Retake Quiz
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </MainLayout>
    )
  }

  if (quizCompleted) {
    return (
      <MainLayout userRole={userRole}>
        <div className="max-w-2xl mx-auto p-6">
          <Card>
            <CardHeader className="text-center">
              <CardTitle>Quiz Completed!</CardTitle>
              <CardDescription>
                Time's up! Let's see how you did.
              </CardDescription>
            </CardHeader>
            <CardContent className="text-center space-y-4">
              <Button onClick={() => setShowResults(true)} className="w-full">
                View Results
              </Button>
              <Button variant="outline" onClick={() => navigate('/student/quizzes')}>
                Back to Quizzes
              </Button>
            </CardContent>
          </Card>
        </div>
      </MainLayout>
    )
  }

  return (
    <MainLayout userRole={userRole}>
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        {/* Quiz Header */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  {currentQuestion && getQuestionTypeIcon(currentQuestion.type)}
                  {mockQuizData.title}
                </CardTitle>
                <CardDescription>
                  {mockQuizData.description}
                </CardDescription>
              </div>
              <div className="text-right">
                <div className="text-sm text-gray-600">Generated by AI</div>
                <div className="text-sm text-gray-600">Moderated by {mockQuizData.teacherName}</div>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div className="p-3 bg-blue-50 rounded-lg">
                <div className="text-lg font-bold text-blue-600">{mockQuizData.totalQuestions}</div>
                <div className="text-sm text-blue-600">Questions</div>
              </div>
              <div className="p-3 bg-green-50 rounded-lg">
                <div className="text-lg font-bold text-green-600">{currentQuestionIndex + 1}</div>
                <div className="text-sm text-green-600">Current</div>
              </div>
              <div className="p-3 bg-yellow-50 rounded-lg">
                <div className="text-lg font-bold text-yellow-600">{formatTime(timeRemaining)}</div>
                <div className="text-sm text-yellow-600">Time Left</div>
              </div>
              <div className="p-3 bg-purple-50 rounded-lg">
                <div className="text-lg font-bold text-purple-600">{mockQuizData.difficulty}</div>
                <div className="text-sm text-purple-600">Difficulty</div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Progress Bar */}
        <div className="space-y-2">
          <div className="flex items-center justify-between text-sm">
            <span>Progress</span>
            <span>{currentQuestionIndex + 1} of {mockQuizData.totalQuestions}</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        {/* Timer Controls */}
        <div className="flex justify-center gap-4">
          {!isActive && !quizCompleted && (
            <Button onClick={startQuiz} className="flex items-center gap-2">
              <Play className="h-4 w-4" />
              Start Quiz
            </Button>
          )}
          {isActive && (
            <>
              <Button variant="outline" onClick={pauseQuiz} className="flex items-center gap-2">
                <Pause className="h-4 w-4" />
                Pause
              </Button>
              <Button variant="outline" onClick={resumeQuiz} className="flex items-center gap-2">
                <Play className="h-4 w-4" />
                Resume
              </Button>
            </>
          )}
        </div>

        {/* Current Question */}
        {currentQuestion && (
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <span className="text-lg font-bold">Question {currentQuestionIndex + 1}</span>
                  <Badge className={getDifficultyColor(currentQuestion.difficulty)}>
                    {currentQuestion.difficulty}
                  </Badge>
                  <Badge variant="outline" className="flex items-center gap-1">
                    <Brain className="h-3 w-3" />
                    AI Generated
                  </Badge>
                </div>
                <div className="text-sm text-gray-600">
                  {currentQuestion.subject} • {currentQuestion.topic}
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="text-lg text-gray-800">
                {currentQuestion.question}
              </div>

              {currentQuestion.type === 'multiple_choice' && (
                <RadioGroup
                  value={answers[currentQuestion.id] || ''}
                  onValueChange={(value) => handleAnswerChange(currentQuestion.id, value)}
                >
                  <div className="space-y-3">
                    {currentQuestion.options.map((option) => (
                      <div key={option.id} className="flex items-center space-x-2">
                        <RadioGroupItem value={option.id} id={option.id} />
                        <Label htmlFor={option.id} className="text-base cursor-pointer">
                          {option.text}
                        </Label>
                      </div>
                    ))}
                  </div>
                </RadioGroup>
              )}

              {currentQuestion.type === 'essay' && (
                <div className="space-y-2">
                  <Label htmlFor="essay-answer" className="text-sm font-medium">
                    Your Answer (Max {currentQuestion.maxWords} words)
                  </Label>
                  <Textarea
                    id="essay-answer"
                    value={answers[currentQuestion.id] || ''}
                    onChange={(e) => handleAnswerChange(currentQuestion.id, e.target.value)}
                    placeholder="Type your answer here..."
                    rows={6}
                    className="resize-none"
                  />
                  <div className="text-xs text-gray-500 text-right">
                    {answers[currentQuestion.id]?.split(' ').filter(word => word.length > 0).length || 0} / {currentQuestion.maxWords} words
                  </div>
                </div>
              )}

              {/* AI and Teacher Information */}
              <div className="p-4 bg-gray-50 rounded-lg space-y-2">
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <Brain className="h-4 w-4" />
                  <span>AI-Generated Question</span>
                </div>
                {currentQuestion.teacherApproved ? (
                  <div className="flex items-center gap-2 text-sm text-green-600">
                    <CheckCircle className="h-4 w-4" />
                    <span>Teacher Approved</span>
                  </div>
                ) : (
                  <div className="flex items-center gap-2 text-sm text-yellow-600">
                    <AlertCircle className="h-4 w-4" />
                    <span>Teacher Modified</span>
                  </div>
                )}
                {currentQuestion.teacherNote && (
                  <div className="text-sm text-gray-600 mt-2">
                    <span className="font-medium">Teacher Note:</span> {currentQuestion.teacherNote}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Navigation */}
        <div className="flex justify-between">
          <Button
            variant="outline"
            onClick={previousQuestion}
            disabled={currentQuestionIndex === 0}
          >
            Previous
          </Button>
          
          <div className="flex gap-2">
            {currentQuestionIndex < mockAIQuestions.length - 1 ? (
              <Button onClick={nextQuestion}>
                Next Question
              </Button>
            ) : (
              <Button onClick={submitQuiz} className="bg-green-600 hover:bg-green-700">
                Submit Quiz
              </Button>
            )}
          </div>
        </div>
      </div>
    </MainLayout>
  )
}
